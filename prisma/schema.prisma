// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  username      String     @unique
  password_hash String
  blogPosts     BlogPost[]
  comments      Comment[]
  isBlogger     Boolean    @default(false)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  commentHistory  CommentHistory[]
  BlogPostHistory BlogPostHistory[]
}

model BlogPost {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  comments    Comment[]
  isPublished Boolean   @default(false)
  isEdited    Boolean   @default(false)

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  commentHistory  CommentHistory[]
  BlogPostHistory BlogPostHistory[]
}

model BlogPostHistory {
  id          Int     @id @default(autoincrement())
  title       String
  content     String
  isPublished Boolean @default(false)

  user   User? @relation(fields: [userId], references: [id])
  userId Int?

  previousUpdatedAt DateTime  @default(now())
  createdAt         DateTime  @default(now())
  blogPost          BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId        Int?
}

model Comment {
  id      Int    @id @default(autoincrement())
  content String

  user           User?            @relation(fields: [userId], references: [id])
  userId         Int?
  blogPost       BlogPost?        @relation(fields: [blogPostId], references: [id])
  blogPostId     Int?
  commentHistory CommentHistory[]
  isEdited       Boolean          @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentHistory {
  id      Int    @id @default(autoincrement())
  content String

  user       User?     @relation(fields: [userId], references: [id])
  userId     Int?
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id])
  blogPostId Int?
  comment    Comment?  @relation(fields: [commentId], references: [id])
  commentId  Int?

  originalCreatedAt DateTime @default(now())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
